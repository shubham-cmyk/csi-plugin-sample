name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - "master"
  pull_request:
    branches:
      - main
      - "master"
    types:
      - closed
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/csi-plugin:${{ github.sha }}

      - name: Install and configure kubectl
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
            --progress-bar \
            --location \
            --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          printf '%s' "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml

  deploy:
    needs: build
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig.yaml
          
          # Replace placeholder with actual image name in controller-plugin.yaml and save it as new-controller-plugin.yaml
          sed "s|IMAGE_NAME_PLACEHOLDER|${{ secrets.DOCKER_HUB_USERNAME }}/csi-plugin:${{ github.sha }}|g" manifest/controller-plugin.yaml > manifest/new-controller-plugin.yaml
          
          kubectl apply -f manifest/serviceAccount.yaml
          kubectl apply -f manifest/clusterRole.yaml
          kubectl apply -f manifest/clusterRoleBinding.yaml
          kubectl apply -f manifest/secret.yaml
          kubectl apply -f manifest/storageClass.yaml

          # Apply the controller Plugin manifest
          kubectl apply -f manifest/new-controller-plugin.yaml

          # Apply the node Plugin manifest